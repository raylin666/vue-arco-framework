{
  "compilerOptions": {
    "target": "ES2020", // 用于指定 TS 最后编译出来的 ES 版本
    "useDefineForClassFields": true,  // 将 class 声明中的字段语义从 [[Set]] 变更到 [[Define]]
    "module": "ES2020", // 设置编译后代码使用的模块化系统：commonjs | UMD | AMD | ES2020 | ESNext | System
    "lib": ["ES2020", "DOM", "DOM.Iterable"], // TS 需要引用的库，即声明文件，es5 默认引用 dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array"
    "skipLibCheck": true, // 忽略所有的声明文件（ *.d.ts）的类型检查
    "baseUrl": ".",  // 解析非相对模块的基地址，默认是当前目录
    "paths": {
      // 解决引入报错 找不到模块 “@/xxxx” 或其相应的类型声明
      "@/*": ["src/*"],
    },

    /* Bundler mode */
    "moduleResolution": "Node",  // 模块解析策略，TS 默认用 Node 的解析策略，即相对的方式导入
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,  // 允许导入扩展名为 “.json” 的模块
    "isolatedModules": true, // 确保每个文件都可以在不依赖其他导入的情况下安全地进行传输
    "esModuleInterop": true,  // 支持导入 CommonJs 模块
    "allowJs": true, // 允许编译器编译 JS，JSX 文件
    "noEmit": true, // 不输出文件,即编译后不会生成任何 JS 文件
    "jsx": "preserve",  // 在 `.tsx`文件里支持JSX：`"React"`或 `"Preserve"`

    /* Linting */
    "strict": true, // 开启所有的严格检查
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。默认值：module === "system" 或设置了 --esModuleInterop 且 module 不为 es2015 / esnext
  },
  "include": [
    "src/**/*.ts", 
    "src/**/*.d.ts",
    "src/**/*.tsx", 
    "src/**/*.vue",
  ],
  "exclude": ["node_modules"],
  // 每个引用的 `path` 属性都可以指向到包含 `tsconfig.json` 文件的目录，或者直接指向到配置文件本身（名字是任意的）
  "references": [{ "path": "./tsconfig.node.json" }],
}
